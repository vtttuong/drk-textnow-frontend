{"ast":null,"code":"'use strict';\n/* eslint-disable es/no-string-prototype-matchall -- safe */\n\nvar $ = require('../internals/export');\n\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\n\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar toLength = require('../internals/to-length');\n\nvar toString = require('../internals/to-string');\n\nvar anObject = require('../internals/an-object');\n\nvar classof = require('../internals/classof-raw');\n\nvar isRegExp = require('../internals/is-regexp');\n\nvar getRegExpFlags = require('../internals/regexp-flags');\n\nvar getMethod = require('../internals/get-method');\n\nvar redefine = require('../internals/redefine');\n\nvar fails = require('../internals/fails');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar advanceStringIndex = require('../internals/advance-string-index');\n\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\nvar InternalStateModule = require('../internals/internal-state');\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar MATCH_ALL = wellKnownSymbol('matchAll');\nvar REGEXP_STRING = 'RegExp String';\nvar REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);\nvar RegExpPrototype = RegExp.prototype;\nvar nativeMatchAll = ''.matchAll;\nvar WORKS_WITH_NON_GLOBAL_REGEX = !!nativeMatchAll && !fails(function () {\n  'a'.matchAll(/./);\n}); // eslint-disable-next-line max-len -- ignore\n\nvar $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, global, fullUnicode) {\n  setInternalState(this, {\n    type: REGEXP_STRING_ITERATOR,\n    regexp: regexp,\n    string: string,\n    global: global,\n    unicode: fullUnicode,\n    done: false\n  });\n}, REGEXP_STRING, function next() {\n  var state = getInternalState(this);\n  if (state.done) return {\n    value: undefined,\n    done: true\n  };\n  var R = state.regexp;\n  var S = state.string;\n  var match = regExpExec(R, S);\n  if (match === null) return {\n    value: undefined,\n    done: state.done = true\n  };\n\n  if (state.global) {\n    if (toString(match[0]) === '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);\n    return {\n      value: match,\n      done: false\n    };\n  }\n\n  state.done = true;\n  return {\n    value: match,\n    done: false\n  };\n});\n\nvar $matchAll = function (string) {\n  var R = anObject(this);\n  var S = toString(string);\n  var C, flagsValue, flags, matcher, global, fullUnicode;\n  C = speciesConstructor(R, RegExp);\n  flagsValue = R.flags;\n\n  if (flagsValue === undefined && R instanceof RegExp && !('flags' in RegExpPrototype)) {\n    flagsValue = getRegExpFlags.call(R);\n  }\n\n  flags = flagsValue === undefined ? '' : toString(flagsValue);\n  matcher = new C(C === RegExp ? R.source : R, flags);\n  global = !!~flags.indexOf('g');\n  fullUnicode = !!~flags.indexOf('u');\n  matcher.lastIndex = toLength(R.lastIndex);\n  return new $RegExpStringIterator(matcher, S, global, fullUnicode);\n}; // `String.prototype.matchAll` method\n// https://tc39.es/ecma262/#sec-string.prototype.matchall\n\n\n$({\n  target: 'String',\n  proto: true,\n  forced: WORKS_WITH_NON_GLOBAL_REGEX\n}, {\n  matchAll: function matchAll(regexp) {\n    var O = requireObjectCoercible(this);\n    var flags, S, matcher, rx;\n\n    if (regexp != null) {\n      if (isRegExp(regexp)) {\n        flags = toString(requireObjectCoercible('flags' in RegExpPrototype ? regexp.flags : getRegExpFlags.call(regexp)));\n        if (!~flags.indexOf('g')) throw TypeError('`.matchAll` does not allow non-global regexes');\n      }\n\n      if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);\n      matcher = getMethod(regexp, MATCH_ALL);\n      if (matcher === undefined && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;\n      if (matcher) return matcher.call(regexp, O);\n    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);\n\n    S = toString(O);\n    rx = new RegExp(regexp, 'g');\n    return IS_PURE ? $matchAll.call(rx, S) : rx[MATCH_ALL](S);\n  }\n});\nIS_PURE || MATCH_ALL in RegExpPrototype || redefine(RegExpPrototype, MATCH_ALL, $matchAll);","map":{"version":3,"sources":["/home/vtttuong/Documents/freelancer/node_modules/core-js/modules/es.string.match-all.js"],"names":["$","require","createIteratorConstructor","requireObjectCoercible","toLength","toString","anObject","classof","isRegExp","getRegExpFlags","getMethod","redefine","fails","wellKnownSymbol","speciesConstructor","advanceStringIndex","regExpExec","InternalStateModule","IS_PURE","MATCH_ALL","REGEXP_STRING","REGEXP_STRING_ITERATOR","setInternalState","set","getInternalState","getterFor","RegExpPrototype","RegExp","prototype","nativeMatchAll","matchAll","WORKS_WITH_NON_GLOBAL_REGEX","$RegExpStringIterator","RegExpStringIterator","regexp","string","global","fullUnicode","type","unicode","done","next","state","value","undefined","R","S","match","lastIndex","$matchAll","C","flagsValue","flags","matcher","call","source","indexOf","target","proto","forced","O","rx","TypeError","apply","arguments"],"mappings":"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","sourcesContent":["'use strict';\n/* eslint-disable es/no-string-prototype-matchall -- safe */\nvar $ = require('../internals/export');\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar anObject = require('../internals/an-object');\nvar classof = require('../internals/classof-raw');\nvar isRegExp = require('../internals/is-regexp');\nvar getRegExpFlags = require('../internals/regexp-flags');\nvar getMethod = require('../internals/get-method');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\nvar InternalStateModule = require('../internals/internal-state');\nvar IS_PURE = require('../internals/is-pure');\n\nvar MATCH_ALL = wellKnownSymbol('matchAll');\nvar REGEXP_STRING = 'RegExp String';\nvar REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);\nvar RegExpPrototype = RegExp.prototype;\nvar nativeMatchAll = ''.matchAll;\n\nvar WORKS_WITH_NON_GLOBAL_REGEX = !!nativeMatchAll && !fails(function () {\n  'a'.matchAll(/./);\n});\n\n// eslint-disable-next-line max-len -- ignore\nvar $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, global, fullUnicode) {\n  setInternalState(this, {\n    type: REGEXP_STRING_ITERATOR,\n    regexp: regexp,\n    string: string,\n    global: global,\n    unicode: fullUnicode,\n    done: false\n  });\n}, REGEXP_STRING, function next() {\n  var state = getInternalState(this);\n  if (state.done) return { value: undefined, done: true };\n  var R = state.regexp;\n  var S = state.string;\n  var match = regExpExec(R, S);\n  if (match === null) return { value: undefined, done: state.done = true };\n  if (state.global) {\n    if (toString(match[0]) === '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);\n    return { value: match, done: false };\n  }\n  state.done = true;\n  return { value: match, done: false };\n});\n\nvar $matchAll = function (string) {\n  var R = anObject(this);\n  var S = toString(string);\n  var C, flagsValue, flags, matcher, global, fullUnicode;\n  C = speciesConstructor(R, RegExp);\n  flagsValue = R.flags;\n  if (flagsValue === undefined && R instanceof RegExp && !('flags' in RegExpPrototype)) {\n    flagsValue = getRegExpFlags.call(R);\n  }\n  flags = flagsValue === undefined ? '' : toString(flagsValue);\n  matcher = new C(C === RegExp ? R.source : R, flags);\n  global = !!~flags.indexOf('g');\n  fullUnicode = !!~flags.indexOf('u');\n  matcher.lastIndex = toLength(R.lastIndex);\n  return new $RegExpStringIterator(matcher, S, global, fullUnicode);\n};\n\n// `String.prototype.matchAll` method\n// https://tc39.es/ecma262/#sec-string.prototype.matchall\n$({ target: 'String', proto: true, forced: WORKS_WITH_NON_GLOBAL_REGEX }, {\n  matchAll: function matchAll(regexp) {\n    var O = requireObjectCoercible(this);\n    var flags, S, matcher, rx;\n    if (regexp != null) {\n      if (isRegExp(regexp)) {\n        flags = toString(requireObjectCoercible('flags' in RegExpPrototype\n          ? regexp.flags\n          : getRegExpFlags.call(regexp)\n        ));\n        if (!~flags.indexOf('g')) throw TypeError('`.matchAll` does not allow non-global regexes');\n      }\n      if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);\n      matcher = getMethod(regexp, MATCH_ALL);\n      if (matcher === undefined && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;\n      if (matcher) return matcher.call(regexp, O);\n    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);\n    S = toString(O);\n    rx = new RegExp(regexp, 'g');\n    return IS_PURE ? $matchAll.call(rx, S) : rx[MATCH_ALL](S);\n  }\n});\n\nIS_PURE || MATCH_ALL in RegExpPrototype || redefine(RegExpPrototype, MATCH_ALL, $matchAll);\n"]},"metadata":{},"sourceType":"script"}