{"ast":null,"code":"'use strict';\n\nvar isArray = require('../internals/is-array');\n\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar bind = require('../internals/function-bind-context'); // `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\n\n\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;\n  var element, elementLen;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        elementLen = lengthOfArrayLike(element);\n        targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n\n    sourceIndex++;\n  }\n\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;","map":{"version":3,"sources":["/home/vtttuong/Documents/freelancer/coreui-free-react-admin-template/node_modules/core-js/internals/flatten-into-array.js"],"names":["isArray","require","lengthOfArrayLike","bind","flattenIntoArray","target","original","source","sourceLen","start","depth","mapper","thisArg","targetIndex","sourceIndex","mapFn","element","elementLen","TypeError","module","exports"],"mappings":"AAAA;;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAArB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,mCAAD,CAA/B;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,oCAAD,CAAlB,C,CAEA;AACA;;;AACA,IAAIG,gBAAgB,GAAG,UAAUC,MAAV,EAAkBC,QAAlB,EAA4BC,MAA5B,EAAoCC,SAApC,EAA+CC,KAA/C,EAAsDC,KAAtD,EAA6DC,MAA7D,EAAqEC,OAArE,EAA8E;AACnG,MAAIC,WAAW,GAAGJ,KAAlB;AACA,MAAIK,WAAW,GAAG,CAAlB;AACA,MAAIC,KAAK,GAAGJ,MAAM,GAAGR,IAAI,CAACQ,MAAD,EAASC,OAAT,EAAkB,CAAlB,CAAP,GAA8B,KAAhD;AACA,MAAII,OAAJ,EAAaC,UAAb;;AAEA,SAAOH,WAAW,GAAGN,SAArB,EAAgC;AAC9B,QAAIM,WAAW,IAAIP,MAAnB,EAA2B;AACzBS,MAAAA,OAAO,GAAGD,KAAK,GAAGA,KAAK,CAACR,MAAM,CAACO,WAAD,CAAP,EAAsBA,WAAtB,EAAmCR,QAAnC,CAAR,GAAuDC,MAAM,CAACO,WAAD,CAA5E;;AAEA,UAAIJ,KAAK,GAAG,CAAR,IAAaV,OAAO,CAACgB,OAAD,CAAxB,EAAmC;AACjCC,QAAAA,UAAU,GAAGf,iBAAiB,CAACc,OAAD,CAA9B;AACAH,QAAAA,WAAW,GAAGT,gBAAgB,CAACC,MAAD,EAASC,QAAT,EAAmBU,OAAnB,EAA4BC,UAA5B,EAAwCJ,WAAxC,EAAqDH,KAAK,GAAG,CAA7D,CAAhB,GAAkF,CAAhG;AACD,OAHD,MAGO;AACL,YAAIG,WAAW,IAAI,gBAAnB,EAAqC,MAAMK,SAAS,CAAC,oCAAD,CAAf;AACrCb,QAAAA,MAAM,CAACQ,WAAD,CAAN,GAAsBG,OAAtB;AACD;;AAEDH,MAAAA,WAAW;AACZ;;AACDC,IAAAA,WAAW;AACZ;;AACD,SAAOD,WAAP;AACD,CAvBD;;AAyBAM,MAAM,CAACC,OAAP,GAAiBhB,gBAAjB","sourcesContent":["'use strict';\nvar isArray = require('../internals/is-array');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar bind = require('../internals/function-bind-context');\n\n// `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;\n  var element, elementLen;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        elementLen = lengthOfArrayLike(element);\n        targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;\n"]},"metadata":{},"sourceType":"script"}